import 'dart:async';

import 'package:flutter/material.dart';

import 'package:provider/provider.dart';

import 'package:proto_1/app_state.dart';

void main() => runApp(MyApp());

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Demo',
      theme: ThemeData(
        primarySwatch: Colors.blue,
        secondaryHeaderColor: Colors.white,
        textTheme: TextTheme(
            body1: TextStyle(color: Colors.white),
            body2: TextStyle(color: Colors.white),
            headline: TextStyle(color: Colors.white),
            title: TextStyle(color: Colors.white)),
      ),
      home: ChangeNotifierProvider(
        create: (_) => AppState(),
        child: Scaffold(
          body: PageView(
              controller: PageController(
                  initialPage:
                      1), // instantiate this  outside build to save instantiation time
              children: [
                InputPage(),
                OutputPage(),
              ]),
        ),
      ),
    );
  }
}

class InputPage extends StatefulWidget {
  @override
  _InputPageState createState() => _InputPageState();
}

class _InputPageState extends State<InputPage> {
  final _inputController = TextEditingController();

  bool _editMode = false;

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      bottomSheet: BottomSheet(
        onClosing: () {},
        builder: (_) => Container(
          color: Colors.grey[400],
          child: ListTile(
            // backgroundColor: Colors.grey[400],
            title: TextField(
              style: TextStyle(color: Colors.white),
              decoration: InputDecoration(
                filled: true,
                fillColor: Colors.grey[400],
                contentPadding: EdgeInsets.all(5.0),
                enabledBorder: OutlineInputBorder(
                  borderSide: BorderSide(width: 2, color: Colors.white),
                ),
                focusedBorder: OutlineInputBorder(
                  borderSide: BorderSide(width: 2, color: Colors.white),
                ),
              ),
              cursorColor: Colors.white,
              controller: _inputController,
            ),
            trailing: FlatButton(
              child: Icon(
                Icons.add,
                color: Colors.white,
              ),
              onPressed: () {},
            ),
          ),
        ),
      ),
      appBar: AppBar(
        title: Text('Input Page'),
        actions: <Widget>[
          IconButton(
            icon: Icon(Icons.clear_all),
            onPressed: () {},
          )
        ],
      ),
      body: CustomScrollView(
        slivers: <Widget>[
          SliverFixedExtentList(
              delegate: SliverChildBuilderDelegate(
                (context, index) => ListTile(
                  title: Text(Provider.of<AppState>(context).items[index].name),
                  trailing: IconButton(
                    icon: Icon(
                      !_editMode ? Icons.favorite_border : Icons.delete,
                    ),
                    onPressed: () {},
                  ),
                ),
                childCount: Provider.of<AppState>(context).items.length,
              ),
              itemExtent: 60),
        ],
      ),
    );
  }
}

class OutputPage extends StatefulWidget {
  const OutputPage({Key key}) : super(key: key);

  @override
  _OutputPageState createState() => _OutputPageState();
}

class _OutputPageState extends State<OutputPage> {
  var _scrollController = ScrollController();

  double _timeLineFactor = 0.2;
  double _leftMargin = 6;
  double _rightMargin = 6;

  int alphaVal = 127;

  @override
  void initState() {
    Future.delayed(Duration(milliseconds: 50), () {
      Provider.of<AppState>(context).refreshNow();
      Timer.periodic(Duration(seconds: 30), (Timer timer) {
        Provider.of<AppState>(context).refreshNow();
      });
    });

    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text(Provider.of<AppState>(context).displayedTitle),
      ),
      body: Container(
        width: MediaQuery.of(context).size.width,
        height: MediaQuery.of(context).size.height,
        child: Stack(children: <Widget>[
          Container(
            child: SingleChildScrollView(
              controller: _scrollController,
              child: Row(
                children: <Widget>[
                  Container(
                    width: MediaQuery.of(context).size.width * _timeLineFactor,
                    child: Column(
                      children: List.generate(
                        145,
                        (index) => index != 144
                            ? Row(
                                children: <Widget>[
                                  Expanded(
                                    child: AnimatedContainer(
                                      duration: Duration(milliseconds: 250),
                                      decoration: BoxDecoration(
                                        color: index <
                                                Provider.of<AppState>(context)
                                                    .now
                                            ? Colors.amber
                                            : (index ==
                                                    Provider.of<AppState>(
                                                            context)
                                                        .now
                                                ? Colors.red
                                                : Colors.blue),
                                        borderRadius: BorderRadius.only(
                                          topLeft: Radius.zero,
                                          bottomLeft: Radius.zero,
                                          topRight: Radius.circular(2),
                                          bottomRight: Radius.circular(2),
                                        ),
                                      ),
                                      child: Text(
                                          Utility.indexToTimeOfDay(index)
                                              .format(context),
                                          textScaleFactor: 0.75,
                                          textAlign: TextAlign.end),
                                      padding: EdgeInsets.only(right: 5),
                                      margin:
                                          EdgeInsets.only(top: 2, bottom: 2),
                                      height: 12,
                                    ),
                                  ),
                                ],
                              )
                            : Row(
                                children: <Widget>[
                                  Expanded(
                                    child: Container(
                                      decoration: BoxDecoration(
                                        color: Colors.blue,
                                        borderRadius: BorderRadius.only(
                                          topLeft: Radius.zero,
                                          bottomLeft: Radius.zero,
                                          topRight: Radius.circular(2),
                                          bottomRight: Radius.circular(2),
                                        ),
                                      ),
                                      child: Text('NEXT DAY',
                                          textScaleFactor: 0.75,
                                          textAlign: TextAlign.end),
                                      padding: EdgeInsets.only(right: 5),
                                      margin:
                                          EdgeInsets.only(top: 2, bottom: 2),
                                      height: (16 * 8) - 4.0,
                                    ),
                                  ),
                                ],
                              ),
                      ),
                    ),
                  ),
                  Container(
                    height: 144 * 16.0 + ((16 * 8) - 4.0),
                    margin:
                        EdgeInsets.only(left: _leftMargin, right: _rightMargin),
                    width: MediaQuery.of(context).size.width *
                            (1 - _timeLineFactor) -
                        (_leftMargin + _rightMargin),
                    child: ReorderableListView(
                      onReorder: (oldIndex, newIndex) {
                        if (newIndex > oldIndex) {
                          newIndex--;
                          Provider.of<AppState>(context)
                              .swapDown(oldIndex, newIndex);
                          Provider.of<AppState>(context).refreshTitle();
                        } else if (newIndex < oldIndex) {
                          Provider.of<AppState>(context)
                              .swapUp(oldIndex, newIndex);
                          Provider.of<AppState>(context).refreshTitle();
                        }
                      },
                      children: Provider.of<AppState>(context)
                          .items
                          .map((item) => Container(
                              key: Key('${item.start}'),
                              child: Center(
                                child: Text(
                                  item.name,
                                  style: TextStyle(
                                      color: Utility.lighterColor(item.color),
                                      fontSize: item.duration < 2 ? 12 : 20,
                                      shadows: [
                                        Shadow(
                                            blurRadius: 2,
                                            color: Utility.lighterColor(
                                                item.color))
                                      ]),
                                ),
                              ),
                              decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(4.0),
                                  color: item.color,
                                  boxShadow: [
                                    BoxShadow(
                                        color: Colors.grey[500], blurRadius: 2)
                                  ]),
                              margin: EdgeInsets.only(top: 2, bottom: 2),
                              height: 16.0 * item.duration - 4,
                              width: MediaQuery.of(context).size.width *
                                      (1 - _timeLineFactor) -
                                  (_leftMargin + _rightMargin)))
                          .toList(),
                    ),
                  )
                ],
              ),
            ),
          ),
          Listener(
            onPointerDown: (event) {
              
            },
            child: Container(
              color: Colors.amber.withAlpha(alphaVal),
              width: MediaQuery.of(context).size.width,
              height: 16.0 * 2,
            ),
          ),
          Container(
              margin: EdgeInsets.only(
                  top: MediaQuery.of(context).size.height - (16.0 * 7)),
              color: Colors.amber.withAlpha(127),
              width: MediaQuery.of(context).size.width,
              height: 16.0 * 2),
        ]),
      ),
    );
  }
}
